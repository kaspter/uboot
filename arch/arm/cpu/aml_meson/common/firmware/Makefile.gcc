

include $(TOPDIR)/config.mk
$(warning $(PLATFORM_CPPFLAGS))
$(warning $(FIRMWARE))

PLATFORM_CPPFLAGS+=-DCONFIG_AMLROM_SPL

LDFLAGS	= -Bstatic -T $(obj)spl.lds  $(PLATFORM_LDFLAGS)


CFLAGS	:=$(CFLAGS:-marm=-mthumb)
CFLAGS	:=$(CFLAGS:-fPIC=)
CFLAGS	:=$(CFLAGS:-ffixed-r8=)
CFLAGS	+=  -DCONFIG_AML_ROMBOOT_SPL  -MD -Wno-unused-function -mno-long-calls
AFLAGS	+= -DCONFIG_AMLROM_SPL -DTEXT_BASE=$(TEXT_BASE) -MD


SOBJS	 = rom_spl.o magic.o jetlab.o

COBJS	 = spl.o

OBJS	:= $(addprefix $(obj),$(SOBJS)  )
__OBJS	:= $(SOBJS) $(COBJS)


VPATH_LIST=	$(TOPDIR)/board/$(BOARDDIR) \
			$(SRCTREE)/$(CPUDIR)/$(SOC) \
			$(SRCTREE)/$(CPUDIR)/common

VPATH_LIST:=$(VPATH_LIST:%=%/firmware)

CFLAGS+=$(VPATH_LIST:%=-I%)

vpath %.c $(VPATH_LIST)
vpath %.S $(VPATH_LIST)
vpath %.s $(VPATH_LIST)

origin_LDS=$(abspath firmware.lds)
target_LDS=$(abspath $(obj)spl.lds)


$(warning VPATH_LIST=$(VPATH_LIST))
$(warning origin_LDS=$(origin_LDS))
$(warning target_LDS=$(target_LDS))

ALL	= $(FIRMWARE) $(basename $(FIRMWARE)).out

all: $(ALL)

%.bin:	%.out
	$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@
$(basename $(FIRMWARE)).out:$(OBJS) $(obj)spl.o $(target_LDS)

%.out:
	$(LD) $(LDFLAGS) $(filter %.o,$^) $(PLATFORM_LIBGCC) \
		-Map $(@:%=%.map) --cref \
		-o $@

$(target_LDS):$(origin_LDS)
	$(CPP) $(CPPFLAGS)   $(LDPPFLAGS) -std=c99 -D__ASSEMBLY__ -P - <$^ >$@

sinclude $(wildcard $(obj)*.d)



#########################################################################
